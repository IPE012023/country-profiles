// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model Organization {
  id                String              @id @default(cuid())
  organizationName  String?             @unique
  slug              String              @unique
  OrganizationEmail OrganizationEmail[]
  users             User[] // Relation to User
}

model OrganizationEmail {
  id             String       @id @default(cuid())
  email          String
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([email, organizationId])
}

model User {
  id                    String                 @id @default(cuid())
  organizationId        String? // Foreign key
  organization          Organization?          @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  company               String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Country {
  countryId   String    @id
  countryName String
  products    Product[] // Relation to Product
  indizes     Index[] // Relation to Index
  VAT         VAT[] // Relation to VAT
}

model Product {
  id         String            @id @default(cuid())
  countryId  String // Foreign key
  name       String
  country    Country           @relation(fields: [countryId], references: [countryId], onDelete: Cascade)
  yearlyData ProductYearData[] // Relation to ProductYearData
}

model Index {
  id         String          @id @default(cuid())
  countryId  String // Foreign key
  name       String
  country    Country         @relation(fields: [countryId], references: [countryId], onDelete: Cascade)
  yearlyData IndexYearData[] // Relation to IndexYearData
}


model VAT {
  id            String        @id @default(cuid())
  countryId     String // Foreign key
  name          String
  country       Country       @relation(fields: [countryId], references: [countryId], onDelete: Cascade)
  yearlyVATData VATYearData[] // Relation to VATYearData
}

model ProductYearData {
  id        String  @id @default(cuid())
  productId String
  year      Int
  RSP       Float
  ETY       Float
  product   Product @relation(fields: [productId], references: [id])

  @@unique([productId, year])
}

model IndexYearData {
  id      String @id @default(cuid())
  indexId String
  year    Int
  value   Float
  index   Index  @relation(fields: [indexId], references: [id])

  @@unique([indexId, year])
}

model VATYearData {
  id      String @id @default(cuid())
  vatId   String
  year    Int
  nom_value Float
  eff_value Float
  vat     VAT    @relation(fields: [vatId], references: [id])

  @@unique([vatId, year])
}
